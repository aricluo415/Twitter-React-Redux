{"version":3,"sources":["table/filterDropdown.jsx"],"names":["stopPropagation","e","nativeEvent","stopImmediatePropagation","FilterMenu","props","setNeverShown","column","rootNode","ReactDOM","findDOMNode","filterBelongToScrollBody","neverShown","fixed","setSelectedKeys","selectedKeys","setState","handleClearFilters","handleConfirm","setVisible","confirmFilter","onVisibleChange","visible","handleMenuItemClick","info","state","keyPath","length","keyPathOfSelectedItem","indexOf","key","renderFilterIcon","locale","prefixCls","filtered","filterIcon","dropdownIconClass","getDropdownVisible","React","cloneElement","title","filterTitle","className","onClick","filterDropdownVisible","valueKeys","filters","prevProps","onFilterDropdownVisibleChange","filterDropdown","map","filter","undefined","item","multiple","filterMultiple","internalSelectedKeys","toString","input","value","text","some","children","items","containSelected","Object","keys","subMenuCls","dropdownPrefixCls","renderMenus","renderMenuItem","originSelectedKeys","getPopupContainer","dropdownMenuClass","hasSubMenu","Function","confirm","clearFilters","triggerNode","parentNode","menus","val","filterConfirm","filterReset","nextProps","prevState","newState","Component","defaultProps","handleFilter"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Menu, { SubMenu, Item as MenuItem } from 'rc-menu';\nimport closest from 'dom-closest';\nimport classNames from 'classnames';\nimport shallowequal from 'shallowequal';\nimport Dropdown from '../dropdown';\nimport Icon from '../icon';\nimport Checkbox from '../checkbox';\nimport Radio from '../radio';\nimport FilterDropdownMenuWrapper from './FilterDropdownMenuWrapper';\nimport { generateValueMaps } from './util';\nfunction stopPropagation(e) {\n    e.stopPropagation();\n    if (e.nativeEvent.stopImmediatePropagation) {\n        e.nativeEvent.stopImmediatePropagation();\n    }\n}\nclass FilterMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setNeverShown = (column) => {\n            const rootNode = ReactDOM.findDOMNode(this);\n            const filterBelongToScrollBody = !!closest(rootNode, `.ant-table-scroll`);\n            if (filterBelongToScrollBody) {\n                // When fixed column have filters, there will be two dropdown menus\n                // Filter dropdown menu inside scroll body should never be shown\n                // To fix https://github.com/ant-design/ant-design/issues/5010 and\n                // https://github.com/ant-design/ant-design/issues/7909\n                this.neverShown = !!column.fixed;\n            }\n        };\n        this.setSelectedKeys = ({ selectedKeys }) => {\n            this.setState({ selectedKeys });\n        };\n        this.handleClearFilters = () => {\n            this.setState({\n                selectedKeys: [],\n            }, this.handleConfirm);\n        };\n        this.handleConfirm = () => {\n            this.setVisible(false);\n            // Call `setSelectedKeys` & `confirm` in the same time will make filter data not up to date\n            // https://github.com/ant-design/ant-design/issues/12284\n            this.setState({}, this.confirmFilter);\n        };\n        this.onVisibleChange = (visible) => {\n            this.setVisible(visible);\n            if (!visible) {\n                this.confirmFilter();\n            }\n        };\n        this.handleMenuItemClick = (info) => {\n            const { selectedKeys } = this.state;\n            if (!info.keyPath || info.keyPath.length <= 1) {\n                return;\n            }\n            const keyPathOfSelectedItem = this.state.keyPathOfSelectedItem;\n            if (selectedKeys && selectedKeys.indexOf(info.key) >= 0) {\n                // deselect SubMenu child\n                delete keyPathOfSelectedItem[info.key];\n            }\n            else {\n                // select SubMenu child\n                keyPathOfSelectedItem[info.key] = info.keyPath;\n            }\n            this.setState({ keyPathOfSelectedItem });\n        };\n        this.renderFilterIcon = () => {\n            const { column, locale, prefixCls, selectedKeys } = this.props;\n            const filtered = selectedKeys && selectedKeys.length > 0;\n            let filterIcon = column.filterIcon;\n            if (typeof filterIcon === 'function') {\n                filterIcon = filterIcon(filtered);\n            }\n            const dropdownIconClass = classNames({\n                [`${prefixCls}-selected`]: filtered,\n                [`${prefixCls}-open`]: this.getDropdownVisible(),\n            });\n            return filterIcon ? (React.cloneElement(filterIcon, {\n                title: locale.filterTitle,\n                className: classNames(`${prefixCls}-icon`, dropdownIconClass, filterIcon.props.className),\n                onClick: stopPropagation,\n            })) : (<Icon title={locale.filterTitle} type=\"filter\" theme=\"filled\" className={dropdownIconClass} onClick={stopPropagation}/>);\n        };\n        const visible = 'filterDropdownVisible' in props.column ? props.column.filterDropdownVisible : false;\n        this.state = {\n            selectedKeys: props.selectedKeys,\n            valueKeys: generateValueMaps(props.column.filters),\n            keyPathOfSelectedItem: {},\n            visible,\n            prevProps: props,\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { column } = nextProps;\n        const { prevProps } = prevState;\n        const newState = {\n            prevProps: nextProps,\n        };\n        /**\n         * if the state is visible the component should ignore updates on selectedKeys prop to avoid\n         * that the user selection is lost\n         * this happens frequently when a table is connected on some sort of realtime data\n         * Fixes https://github.com/ant-design/ant-design/issues/10289 and\n         * https://github.com/ant-design/ant-design/issues/10209\n         */\n        if ('selectedKeys' in nextProps &&\n            !shallowequal(prevProps.selectedKeys, nextProps.selectedKeys)) {\n            newState.selectedKeys = nextProps.selectedKeys;\n        }\n        if (!shallowequal((prevProps.column || {}).filters, (nextProps.column || {}).filters)) {\n            newState.valueKeys = generateValueMaps(nextProps.column.filters);\n        }\n        if ('filterDropdownVisible' in column) {\n            newState.visible = column.filterDropdownVisible;\n        }\n        return newState;\n    }\n    componentDidMount() {\n        const { column } = this.props;\n        this.setNeverShown(column);\n    }\n    componentDidUpdate() {\n        const { column } = this.props;\n        this.setNeverShown(column);\n    }\n    getDropdownVisible() {\n        return this.neverShown ? false : this.state.visible;\n    }\n    setVisible(visible) {\n        const { column } = this.props;\n        if (!('filterDropdownVisible' in column)) {\n            this.setState({ visible });\n        }\n        if (column.onFilterDropdownVisibleChange) {\n            column.onFilterDropdownVisibleChange(visible);\n        }\n    }\n    confirmFilter() {\n        const { selectedKeys, valueKeys } = this.state;\n        const { filterDropdown } = this.props.column;\n        if (!shallowequal(selectedKeys, this.props.selectedKeys)) {\n            this.props.confirmFilter(this.props.column, filterDropdown\n                ? selectedKeys\n                : selectedKeys.map(key => valueKeys[key]).filter(key => key !== undefined));\n        }\n    }\n    renderMenuItem(item) {\n        const { column } = this.props;\n        const { selectedKeys } = this.state;\n        const multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n        // We still need trade key as string since Menu render need string\n        const internalSelectedKeys = (selectedKeys || []).map(key => key.toString());\n        const input = multiple ? (<Checkbox checked={internalSelectedKeys.indexOf(item.value.toString()) >= 0}/>) : (<Radio checked={internalSelectedKeys.indexOf(item.value.toString()) >= 0}/>);\n        return (<MenuItem key={item.value}>\n        {input}\n        <span>{item.text}</span>\n      </MenuItem>);\n    }\n    hasSubMenu() {\n        const { column: { filters = [] }, } = this.props;\n        return filters.some(item => !!(item.children && item.children.length > 0));\n    }\n    renderMenus(items) {\n        return items.map(item => {\n            if (item.children && item.children.length > 0) {\n                const { keyPathOfSelectedItem } = this.state;\n                const containSelected = Object.keys(keyPathOfSelectedItem).some(key => keyPathOfSelectedItem[key].indexOf(item.value) >= 0);\n                const subMenuCls = containSelected\n                    ? `${this.props.dropdownPrefixCls}-submenu-contain-selected`\n                    : '';\n                return (<SubMenu title={item.text} className={subMenuCls} key={item.value.toString()}>\n            {this.renderMenus(item.children)}\n          </SubMenu>);\n            }\n            return this.renderMenuItem(item);\n        });\n    }\n    render() {\n        const { selectedKeys: originSelectedKeys } = this.state;\n        const { column, locale, prefixCls, dropdownPrefixCls, getPopupContainer } = this.props;\n        // default multiple selection in filter dropdown\n        const multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n        const dropdownMenuClass = classNames({\n            [`${dropdownPrefixCls}-menu-without-submenu`]: !this.hasSubMenu(),\n        });\n        let { filterDropdown } = column;\n        if (filterDropdown instanceof Function) {\n            filterDropdown = filterDropdown({\n                prefixCls: `${dropdownPrefixCls}-custom`,\n                setSelectedKeys: (selectedKeys) => this.setSelectedKeys({ selectedKeys }),\n                selectedKeys: originSelectedKeys,\n                confirm: this.handleConfirm,\n                clearFilters: this.handleClearFilters,\n                filters: column.filters,\n                getPopupContainer: (triggerNode) => triggerNode.parentNode,\n            });\n        }\n        const menus = filterDropdown ? (<FilterDropdownMenuWrapper className={`${prefixCls}-dropdown`}>\n        {filterDropdown}\n      </FilterDropdownMenuWrapper>) : (<FilterDropdownMenuWrapper className={`${prefixCls}-dropdown`}>\n        <Menu multiple={multiple} onClick={this.handleMenuItemClick} prefixCls={`${dropdownPrefixCls}-menu`} className={dropdownMenuClass} onSelect={this.setSelectedKeys} onDeselect={this.setSelectedKeys} selectedKeys={originSelectedKeys && originSelectedKeys.map(val => val.toString())} getPopupContainer={(triggerNode) => triggerNode.parentNode}>\n          {this.renderMenus(column.filters)}\n        </Menu>\n        <div className={`${prefixCls}-dropdown-btns`}>\n          <a className={`${prefixCls}-dropdown-link confirm`} onClick={this.handleConfirm}>\n            {locale.filterConfirm}\n          </a>\n          <a className={`${prefixCls}-dropdown-link clear`} onClick={this.handleClearFilters}>\n            {locale.filterReset}\n          </a>\n        </div>\n      </FilterDropdownMenuWrapper>);\n        return (<Dropdown trigger={['click']} placement=\"bottomRight\" overlay={menus} visible={this.getDropdownVisible()} onVisibleChange={this.onVisibleChange} getPopupContainer={getPopupContainer} forceRender>\n        {this.renderFilterIcon()}\n      </Dropdown>);\n    }\n}\nFilterMenu.defaultProps = {\n    handleFilter() { },\n    column: {},\n};\npolyfill(FilterMenu);\nexport default FilterMenu;\n"],"file":"filterDropdown.js"}