{"ast":null,"code":"var _jsxFileName = \"/Users/aricluo/VS_Code_Projects/Twitter-React-Django/twitter_react_django/twitter_react_django/client/src/containers/Register.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/authActions\";\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from \"antd\";\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          this.props.authSignUp(values.userName, values.password);\n          this.props.history.push(\"/\");\n          console.log(\"Received values of form: \", values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue(\"password\")) {\n        callback(\"Two passwords that you enter is inconsistent!\");\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields([\"confirm\"], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, getFieldDecorator(\"username\", {\n      rules: [{\n        required: true,\n        message: \"Please input your E-mail!\"\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, getFieldDecorator(\"email\", {\n      rules: [{\n        type: \"email\",\n        message: \"The input is not valid E-mail!\"\n      }, {\n        required: true,\n        message: \"Please input your E-mail!\"\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, getFieldDecorator(\"password\", {\n      rules: [{\n        required: true,\n        message: \"Please input your password!\"\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, getFieldDecorator(\"confirm\", {\n      rules: [{\n        required: true,\n        message: \"Please confirm your password!\"\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nconst WrappedRegistrationForm = Form.create({\n  name: \"register\"\n})(RegistrationForm);\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    authSignUp: (username, password) => dispatch(actions.authSignup(username, password))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegistrationForm);","map":{"version":3,"sources":["/Users/aricluo/VS_Code_Projects/Twitter-React-Django/twitter_react_django/twitter_react_django/client/src/containers/Register.js"],"names":["React","connect","actions","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","authSignUp","userName","password","history","push","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","rules","required","message","type","validator","WrappedRegistrationForm","create","name","mapStateToProps","loading","error","mapDispatchToProps","dispatch","username","authSignup"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AACA,SACEC,IADF,EAEEC,KAFF,EAGEC,OAHF,EAIEC,IAJF,EAKEC,QALF,EAMEC,MANF,EAOEC,GAPF,EAQEC,GARF,EASEC,QATF,EAUEC,MAVF,EAWEC,YAXF,QAYO,MAZP;MAcQC,M,GAAWN,M,CAAXM,M;AACR,MAAMC,kBAAkB,GAAGF,YAAY,CAACC,MAAxC;;AACA,MAAME,gBAAN,SAA+BhB,KAAK,CAACiB,SAArC,CAA+C;AAAA;AAAA;AAAA,SAC7CC,KAD6C,GACrC;AACNC,MAAAA,YAAY,EAAE,KADR;AAENC,MAAAA,kBAAkB,EAAE;AAFd,KADqC;;AAAA,SAM7CC,YAN6C,GAM9BC,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,KAAL,CAAWC,IAAX,CAAgBC,uBAAhB,CAAwC,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACvD,YAAI,CAACD,GAAL,EAAU;AACR,eAAKH,KAAL,CAAWK,UAAX,CAAsBD,MAAM,CAACE,QAA7B,EAAuCF,MAAM,CAACG,QAA9C;AACA,eAAKP,KAAL,CAAWQ,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCP,MAAzC;AACD;AACF,OAND;AAOD,KAf4C;;AAAA,SAiB7CQ,iBAjB6C,GAiBzBd,CAAC,IAAI;AAAA,YACfe,KADe,GACLf,CAAC,CAACgB,MADG,CACfD,KADe;AAEvB,WAAKE,QAAL,CAAc;AAAEpB,QAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,YAAX,IAA2B,CAAC,CAACkB;AAA7C,OAAd;AACD,KApB4C;;AAAA,SAsB7CG,sBAtB6C,GAsBpB,CAACC,IAAD,EAAOJ,KAAP,EAAcK,QAAd,KAA2B;AAAA,YAC1CjB,IAD0C,GACjC,KAAKD,KAD4B,CAC1CC,IAD0C;;AAElD,UAAIY,KAAK,IAAIA,KAAK,KAAKZ,IAAI,CAACkB,aAAL,CAAmB,UAAnB,CAAvB,EAAuD;AACrDD,QAAAA,QAAQ,CAAC,+CAAD,CAAR;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ;AACT;AACF,KA7B4C;;AAAA,SA+B7CE,sBA/B6C,GA+BpB,CAACH,IAAD,EAAOJ,KAAP,EAAcK,QAAd,KAA2B;AAAA,YAC1CjB,IAD0C,GACjC,KAAKD,KAD4B,CAC1CC,IAD0C;;AAElD,UAAIY,KAAK,IAAI,KAAKnB,KAAL,CAAWC,YAAxB,EAAsC;AACpCM,QAAAA,IAAI,CAACoB,cAAL,CAAoB,CAAC,SAAD,CAApB,EAAiC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAjC;AACD;;AACDJ,MAAAA,QAAQ;AACT,KArC4C;AAAA;;AAuC7CK,EAAAA,MAAM,GAAG;AAAA,UACCC,iBADD,GACuB,KAAKxB,KAAL,CAAWC,IADlC,CACCuB,iBADD;AAGP,UAAMC,cAAc,GAAG;AACrBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADI;AAERC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFI,OADW;AAKrBE,MAAAA,UAAU,EAAE;AACVH,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADM;AAEVC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFM;AALS,KAAvB;AAWA,WACE,oBAAC,IAAD,oBAAUH,cAAV;AAA0B,MAAA,QAAQ,EAAE,KAAK5B,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG2B,iBAAiB,CAAC,UAAD,EAAa;AAC7BO,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAE;AAFX,OADK;AADsB,KAAb,CAAjB,CAOE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADH,CADF,EAWE,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGT,iBAAiB,CAAC,OAAD,EAAU;AAC1BO,MAAAA,KAAK,EAAE,CACL;AACEG,QAAAA,IAAI,EAAE,OADR;AAEED,QAAAA,OAAO,EAAE;AAFX,OADK,EAKL;AACED,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAE;AAFX,OALK;AADmB,KAAV,CAAjB,CAWE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADH,CAXF,EAyBE,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,UAAjB;AAA4B,MAAA,WAAW,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGT,iBAAiB,CAAC,UAAD,EAAa;AAC7BO,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAE;AAFX,OADK,EAKL;AACEE,QAAAA,SAAS,EAAE,KAAKf;AADlB,OALK;AADsB,KAAb,CAAjB,CAUE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADH,CAzBF,EAsCE,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,kBAAjB;AAAoC,MAAA,WAAW,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGI,iBAAiB,CAAC,SAAD,EAAY;AAC5BO,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAE;AAFX,OADK,EAKL;AACEE,QAAAA,SAAS,EAAE,KAAKnB;AADlB,OALK;AADqB,KAAZ,CAAjB,CAUE,oBAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,MAAM,EAAE,KAAKJ,iBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADH,CAtCF,EAoDE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CApDF,CADF;AA4DD;;AAjH4C;;AAoH/C,MAAMwB,uBAAuB,GAAGzD,IAAI,CAAC0D,MAAL,CAAY;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAZ,EAC9B9C,gBAD8B,CAAhC;;AAGA,MAAM+C,eAAe,GAAG7C,KAAK,IAAI;AAC/B,SAAO;AACL8C,IAAAA,OAAO,EAAE9C,KAAK,CAAC8C,OADV;AAELC,IAAAA,KAAK,EAAE/C,KAAK,CAAC+C;AAFR,GAAP;AAID,CALD;;AAOA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLtC,IAAAA,UAAU,EAAE,CAACuC,QAAD,EAAWrC,QAAX,KACVoC,QAAQ,CAACjE,OAAO,CAACmE,UAAR,CAAmBD,QAAnB,EAA6BrC,QAA7B,CAAD;AAFL,GAAP;AAID,CALD;;AAOA,eAAe9B,OAAO,CACpB8D,eADoB,EAEpBG,kBAFoB,CAAP,CAGbN,uBAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/authActions\";\nimport {\n  Form,\n  Input,\n  Tooltip,\n  Icon,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  Button,\n  AutoComplete\n} from \"antd\";\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: []\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        this.props.authSignUp(values.userName, values.password);\n        this.props.history.push(\"/\");\n        console.log(\"Received values of form: \", values);\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue(\"password\")) {\n      callback(\"Two passwords that you enter is inconsistent!\");\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields([\"confirm\"], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      }\n    };\n\n    return (\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n        <Form.Item label=\"Username\">\n          {getFieldDecorator(\"username\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your E-mail!\"\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"E-mail\">\n          {getFieldDecorator(\"email\", {\n            rules: [\n              {\n                type: \"email\",\n                message: \"The input is not valid E-mail!\"\n              },\n              {\n                required: true,\n                message: \"Please input your E-mail!\"\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Password\" hasFeedback>\n          {getFieldDecorator(\"password\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your password!\"\n              },\n              {\n                validator: this.validateToNextPassword\n              }\n            ]\n          })(<Input.Password />)}\n        </Form.Item>\n        <Form.Item label=\"Confirm Password\" hasFeedback>\n          {getFieldDecorator(\"confirm\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please confirm your password!\"\n              },\n              {\n                validator: this.compareToFirstPassword\n              }\n            ]\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Register\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedRegistrationForm = Form.create({ name: \"register\" })(\n  RegistrationForm\n);\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    authSignUp: (username, password) =>\n      dispatch(actions.authSignup(username, password))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WrappedRegistrationForm);\n"]},"metadata":{},"sourceType":"module"}